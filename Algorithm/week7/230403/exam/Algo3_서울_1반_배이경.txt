1. Big-O 표기법의 의미에 대해 간단히 설명하시오.
 
Big-O 표기법은 연산의 시간복잡도를 나타내는 표기법이다. 
어떤 연산을 수행할 때 답이 연산의 가장 마지막에서야 발견될 수 있는 최악의 경우도 항상 고려하여 불필요한 연산 또는 메모리 사용을 방지해야 한다.
예를 들어, 피보나치 수열을 구하기 위해 재귀 함수를 작성할 수도 있고, Dynamic Programming 을 이용하여 함수를 작성할 수도 있다.
이 때, 재귀함수를 이용한다면 숫자가 커질수록 연산에 소요되는 시간이 길어지게 되며, O(2^n) 의 시간복잡도를 갖는다.
반면, Dynamic Programming과 Memoization 을 이용하여 함수를 작성하는 경우, 작은 단위의 연산들을 반복하여 호출하지 않고
저장하여 불러오기 때문에 연산에 소요되는시간이 크게 단축되며, O(n)의 시간복잡도를 갖게 된다.
시간복잡도 자체는 매 경우마다 달라지나, 각각의 경우에 대해 일반화하여 Big-O notation으로 표기하여 이러한 시간복잡도를 알아보기 쉽고 간편하게 표기할 수 있다.

2. f(n)의 시간복잡도를 n에 대한 big-O 표기법으로 표시하고, 이를 구하는 과정을 수식으로 나타내시오.

O(n)

T(n) = T(n-1)+1, T(0) = 1 // n = 5 라고 했을 때,

T(5) = T(4)+1	# 6
T(4) = T(3) + 1	# 5
T(3) = T(2) + 1 	# 4
T(2) = T(1) + 1 	# 3
T(1) = T(0) + 1 	# 2
T(0) = 1		# given
------------------------------------------------------
T(5) 	= T(4) + 1		# 1회
	= T(3) + 1 + 1		# 2회
	= T(2) + 1 + 1 + 1		# 3회
	= T(1) + 1 + 1 + 1 + 1	# 4회
	= T(0) + 1 + 1 + 1 + 1 + 1	# 5회
	= 1 + 1 + 1 + 1 + 1 + 1	# 6회
	= 6
------------------------------------------------------
n이 얼마가 되던간에 연산은 n + 1번만 수행하면 되므로, 연산 시간은 linear 하게 증가한다.
즉, 시간 복잡도는 O(n)이다.